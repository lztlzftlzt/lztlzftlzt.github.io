// Include standard headers
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <sstream>
#include <iostream>
#include<windows.h>
#include<math.h>
using namespace std;

// Include GLEW
#include <GL/glew.h>

// Include GLFW
#include <glfw3.h>
GLFWwindow* window;

// Include GLM
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtx/quaternion.hpp>
using namespace glm;

// Include AntTweakBar
#include <AntTweakBar.h>

#include <common/shader.hpp>
#include <common/controls.hpp>
#include <common/objloader.hpp>
#include <common/vboindexer.hpp>



typedef struct Vertex {
	float XYZW[4];
	float RGBA[4];
};

typedef struct Wcord {
	float Xcord;
	float Ycord;
	float Zcord;
};

int main(void)
{
	int k = 0, m = 0;
	int prepoints = 8;   //define and init the previously stored points in task2
	int TessNum = 8;     //define the tessellation number
	int ShowBezier = 0;

	// Initialise GLFW
	if (!glfwInit())
	{
		fprintf(stderr, "Failed to initialize GLFW\n");
		return -1;
	}

	glfwWindowHint(GLFW_SAMPLES, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// Open a window and create its OpenGL context
	window = glfwCreateWindow(1024, 768, "Zhitao Liu (90838017)", NULL, NULL);
	if (window == NULL) {
		fprintf(stderr, "Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.\n");
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	// Initialize GLEW
	glewExperimental = true; // Needed for core profile
	if (glewInit() != GLEW_OK) {
		fprintf(stderr, "Failed to initialize GLEW\n");
		return -1;
	}

	// Initialize the GUI
	TwInit(TW_OPENGL_CORE, NULL);
	TwWindowSize(1024, 768);
	TwBar * GUI = TwNewBar("Picking");
	TwSetParam(GUI, NULL, "refresh", TW_PARAM_CSTRING, 1, "0.1");
	std::string message;
	TwAddVarRW(GUI, "Last picked object", TW_TYPE_STDSTRING, &message, NULL);

	// Ensure we can capture the escape key being pressed below
	glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);
	glfwSetCursorPos(window, 1024 / 2, 768 / 2);

	// Dark blue background
	glClearColor(0.0f, 0.0f, 0.4f, 0.0f);

	// Enable depth test
	glEnable(GL_DEPTH_TEST);
	// Accept fragment if it closer to the camera than the former one
	glDepthFunc(GL_LESS);

	// Cull triangles which normal is not towards the camera
	glEnable(GL_CULL_FACE);

	// Projection matrix : 45� Field of View, 4:3 ratio, display range : 0.1 unit <-> 100 units
	//glm::mat4 ProjectionMatrix = glm::perspective(45.0f, 4.0f / 3.0f, 0.1f, 100.0f);
	// Or, for an ortho camera :
	glm::mat4 ProjectionMatrix = glm::ortho(-4.0f, 4.0f, -3.0f, 3.0f, 0.0f, 100.0f); // In world coordinates

																					 // Camera matrix
	glm::mat4 ViewMatrix = glm::lookAt(
		glm::vec3(0, 0, -5), // Camera is at (4,3,3), in World Space
		glm::vec3(0, 0, 0), // and looks at the origin
		glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
	);


	// Define points
	struct Vertex TempVertice = { { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 0.0f, 1.0f } };       //Used for restore original color
	struct Vertex BNTemp1 = { { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 0.0f, 1.0f } };           //Used to store two vectors on osculating plane
	struct Vertex BNTemp2 = { { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 0.0f, 1.0f } };
	struct Vertex GTTemp = { { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 0.0f, 1.0f } };            //Used to store generated Tangent
	struct Vertex GBNTemp = { { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 0.0f, 1.0f } };			 //Used to store generated Binormal

	int TempID = 8;    //used to record coordinate of mouse
	int TempID1 = 0;   //used in doubling points
	int TempID2 = 0;   //used to calculate control points
	int TempID3 = 0;   //used to calculate evaluation points
	int Trigger1 = 0;
	int Trigger2 = 0;
	int pressed1 = 0;
	int pressed2 = 0;
	int pressed4 = 0;
	int pressed5 = 0;
	int ShowTNB = 0;    //while=1,show Yellow dot, Tagent, Normal and Binormal
	int ZPick = 0;      //while=1,make the point move in Z-direction
	int DoubleView = 0; //while=1,show double views

	struct Vertex Vertices[] =
	{
		{ { 0.7f, 0.7f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },	 // CPoint0
		{ { 0.0f, 1.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },	 // CPoint1
		{ { -0.7f, 0.7f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },  // CPoint2
		{ { -1.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },	 // CPoint3
		{ { -0.7f, -0.7f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } }, // CPoint4
		{ { 0.0f, -1.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },	 // CPoint5
		{ { 0.7f, -0.7f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },  // CPoint6
		{ { 1.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },   // CPoint7
	};

	struct Vertex CVertices[] =
	{
		{ { 0.7f, 0.7f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },	 // WhitePoint0
		{ { 0.0f, 1.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },	 // WhitePoint1
		{ { -0.7f, 0.7f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },  // WhitePoint2
		{ { -1.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },  // WhitePoint3
		{ { -0.7f, -0.7f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } }, // WhitePoint4
		{ { 0.0f, -1.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },  // WhitePoint5
		{ { 0.7f, -0.7f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },  // WhitePoint6
		{ { 1.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },   // WhitePoint7
		{ { 0.7f, 0.7f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },	 // WhitePoint8=WhitePoint0, make sure the curve is closed
	};

	//store the present generated control points in Task2, CPPVertices[257]
	struct Vertex CPPVertices[] =
	{
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
	};

	//store the previous generated control points in Task2,CPPVertices[257]
	struct Vertex CPRVertices[] =
	{
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 1.0f, 1.0f } },
	};

	//store the control points of 8 Bezier Pieces, BPVertices[33],color=red
	struct Vertex BPVertices[] =
	{
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
	};

	//store the  evaluation points generated in Task4, EPVertices[8*(TessNum)+1],color=red
	struct Vertex EPVertices[] = {
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
	};

	//store the yellow points,color=yellow
	struct Vertex YVertices[] = {
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 1.0f, 0.0f, 1.0f } },
	};

	//store the two points that form a tagent,color=red
	struct Vertex TVertices[] = {
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } },
	};

	//store the two points that form a normal,color=green
	struct Vertex NVertices[] = {
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } },
	};

	//store the two points that form a binormal,color=blue
	struct Vertex BNVertices[] = {
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } },
		{ { 0.0f, 0.0f, 0.0f, 1.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } },
	};

	struct Wcord Worldcord = { 0, 0, 0 };

	unsigned short Indices[] = {
		0, 1, 2, 3, 4, 5, 6, 7
	};

	unsigned short CIndices[] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8
	};

	unsigned short CPPIndices[] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
		31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
		61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
		91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
		121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
		151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
		181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
		211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
		241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256
	};

	unsigned short CPRIndices[] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
		31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
		61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
		91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
		121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
		151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
		181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
		211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
		241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256
	};

	unsigned short BPIndices[] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
		31, 32
	};

	unsigned short EPIndices[] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
		31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
		60, 61, 62, 63, 64
	};

	unsigned short YIndices[] = {
		0
	};

	unsigned short TIndices[] = {
		0, 1
	};

	unsigned short NIndices[] = {
		0, 1
	};

	unsigned short BNIndices[] = {
		0, 1
	};

	const size_t BufferSize = sizeof(Vertices);
	const size_t VertexSize = sizeof(Vertices[0]);
	const size_t RgbOffset = sizeof(Vertices[0].XYZW);
	const size_t IndexCount = sizeof(Indices) / sizeof(unsigned short);

	const size_t CBufferSize = sizeof(CVertices);
	const size_t CVertexSize = sizeof(CVertices[0]);
	const size_t CRgbOffset = sizeof(CVertices[0].XYZW);
	const size_t CIndexCount = sizeof(CIndices) / sizeof(unsigned short);

	const size_t CPPBufferSize = sizeof(CPPVertices);
	const size_t CPPVertexSize = sizeof(CPPVertices[0]);
	const size_t CPPRgbOffset = sizeof(CPPVertices[0].XYZW);
	const size_t CPPIndexCount = sizeof(CPPIndices) / sizeof(unsigned short);

	const size_t CPRBufferSize = sizeof(CPRVertices);
	const size_t CPRVertexSize = sizeof(CPRVertices[0]);
	const size_t CPRRgbOffset = sizeof(CPRVertices[0].XYZW);
	const size_t CPRIndexCount = sizeof(CPRIndices) / sizeof(unsigned short);

	const size_t BPBufferSize = sizeof(BPVertices);
	const size_t BPVertexSize = sizeof(BPVertices[0]);
	const size_t BPRgbOffset = sizeof(BPVertices[0].XYZW);
	const size_t BPIndexCount = sizeof(BPIndices) / sizeof(unsigned short);

	const size_t EPBufferSize = sizeof(EPVertices);
	const size_t EPVertexSize = sizeof(EPVertices[0]);
	const size_t EPRgbOffset = sizeof(EPVertices[0].XYZW);
	const size_t EPIndexCount = sizeof(EPIndices) / sizeof(unsigned short);

	const size_t YBufferSize = sizeof(YVertices);
	const size_t YVertexSize = sizeof(YVertices[0]);
	const size_t YRgbOffset = sizeof(YVertices[0].XYZW);
	const size_t YIndexCount = sizeof(YIndices) / sizeof(unsigned short);

	const size_t TBufferSize = sizeof(TVertices);
	const size_t TVertexSize = sizeof(TVertices[0]);
	const size_t TRgbOffset = sizeof(TVertices[0].XYZW);
	const size_t TIndexCount = sizeof(TIndices) / sizeof(unsigned short);

	const size_t NBufferSize = sizeof(NVertices);
	const size_t NVertexSize = sizeof(NVertices[0]);
	const size_t NRgbOffset = sizeof(NVertices[0].XYZW);
	const size_t NIndexCount = sizeof(NIndices) / sizeof(unsigned short);

	const size_t BNBufferSize = sizeof(BNVertices);
	const size_t BNVertexSize = sizeof(BNVertices[0]);
	const size_t BNRgbOffset = sizeof(BNVertices[0].XYZW);
	const size_t BNIndexCount = sizeof(BNIndices) / sizeof(unsigned short);

	float pickingColor[IndexCount] = { 0 / 255.0f, 1 / 255.0f, 2 / 255.0f, 3 / 255.0f, 4 / 255.0f, 5 / 255.0f, 6 / 255.0f, 7 / 255.0f
	};		// set this procedurally for greater number of points

			// Create Vertex Array Object(VAO)
	GLuint VertexArrayId;
	glGenVertexArrays(1, &VertexArrayId);
	glBindVertexArray(VertexArrayId);

	GLuint CVertexArrayId;
	glGenVertexArrays(1, &CVertexArrayId);
	glBindVertexArray(CVertexArrayId);

	GLuint CPPVertexArrayId;
	glGenVertexArrays(1, &CPPVertexArrayId);
	glBindVertexArray(CPPVertexArrayId);

	GLuint CPRVertexArrayId;
	glGenVertexArrays(1, &CPRVertexArrayId);
	glBindVertexArray(CPRVertexArrayId);

	GLuint BPVertexArrayId;
	glGenVertexArrays(1, &BPVertexArrayId);
	glBindVertexArray(BPVertexArrayId);

	GLuint EPVertexArrayId;
	glGenVertexArrays(1, &EPVertexArrayId);
	glBindVertexArray(EPVertexArrayId);

	GLuint YVertexArrayId;
	glGenVertexArrays(1, &YVertexArrayId);
	glBindVertexArray(YVertexArrayId);

	GLuint TVertexArrayId;
	glGenVertexArrays(1, &TVertexArrayId);
	glBindVertexArray(TVertexArrayId);

	GLuint NVertexArrayId;
	glGenVertexArrays(1, &NVertexArrayId);
	glBindVertexArray(NVertexArrayId);

	GLuint BNVertexArrayId;
	glGenVertexArrays(1, &BNVertexArrayId);
	glBindVertexArray(BNVertexArrayId);

	// Create and load Buffer for vertex data(VBO)
	GLuint VertexBufferId;
	glGenBuffers(1, &VertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, BufferSize, Vertices, GL_STATIC_DRAW);

	GLuint CVertexBufferId;
	glGenBuffers(1, &CVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, CVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, CBufferSize, CVertices, GL_STATIC_DRAW);

	GLuint CPPVertexBufferId;
	glGenBuffers(1, &CPPVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, CPPVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, CPPBufferSize, CPPVertices, GL_STATIC_DRAW);

	GLuint CPRVertexBufferId;
	glGenBuffers(1, &CPRVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, CPRVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, CPRBufferSize, CPRVertices, GL_STATIC_DRAW);

	GLuint BPVertexBufferId;
	glGenBuffers(1, &BPVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, BPVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, BPBufferSize, BPVertices, GL_STATIC_DRAW);

	GLuint EPVertexBufferId;
	glGenBuffers(1, &EPVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, EPVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, EPBufferSize, EPVertices, GL_STATIC_DRAW);

	GLuint YVertexBufferId;
	glGenBuffers(1, &YVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, YVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, YBufferSize, YVertices, GL_STATIC_DRAW);

	GLuint TVertexBufferId;
	glGenBuffers(1, &TVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, TVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, TBufferSize, TVertices, GL_STATIC_DRAW);

	GLuint NVertexBufferId;
	glGenBuffers(1, &NVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, NVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, NBufferSize, NVertices, GL_STATIC_DRAW);

	GLuint BNVertexBufferId;
	glGenBuffers(1, &BNVertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, BNVertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, BNBufferSize, BNVertices, GL_STATIC_DRAW);


	// Create Buffer for indices
	GLuint IndexBufferId;
	glGenBuffers(1, &IndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(Indices), Indices, GL_STATIC_DRAW);

	GLuint CIndexBufferId;
	glGenBuffers(1, &CIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(CIndices), CIndices, GL_STATIC_DRAW);

	GLuint CPPIndexBufferId;
	glGenBuffers(1, &CPPIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CPPIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(CPPIndices), CPPIndices, GL_STATIC_DRAW);

	GLuint CPRIndexBufferId;
	glGenBuffers(1, &CPRIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CPRIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(CPRIndices), CPRIndices, GL_STATIC_DRAW);

	GLuint BPIndexBufferId;
	glGenBuffers(1, &BPIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BPIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(BPIndices), BPIndices, GL_STATIC_DRAW);

	GLuint EPIndexBufferId;
	glGenBuffers(1, &EPIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EPIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(EPIndices), EPIndices, GL_STATIC_DRAW);

	GLuint YIndexBufferId;
	glGenBuffers(1, &YIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, YIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(YIndices), YIndices, GL_STATIC_DRAW);

	GLuint TIndexBufferId;
	glGenBuffers(1, &TIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(TIndices), TIndices, GL_STATIC_DRAW);

	GLuint NIndexBufferId;
	glGenBuffers(1, &NIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, NIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(NIndices), NIndices, GL_STATIC_DRAW);

	GLuint BNIndexBufferId;
	glGenBuffers(1, &BNIndexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BNIndexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(BNIndices), BNIndices, GL_STATIC_DRAW);

	// Create and compile our GLSL program from the shaders
	GLuint programID = LoadShaders("StandardShading.vertexshader", "StandardShading.fragmentshader");
	GLuint pickingProgramID = LoadShaders("Picking.vertexshader", "Picking.fragmentshader");

	// Get a handle for our "MVP" uniform
	GLuint MatrixID = glGetUniformLocation(programID, "MVP");
	GLuint ViewMatrixID = glGetUniformLocation(programID, "V");
	GLuint ModelMatrixID = glGetUniformLocation(programID, "M");
	GLuint ViewportID = glGetUniformLocation(programID, "V");
	GLuint PickingMatrixID = glGetUniformLocation(pickingProgramID, "MVP");
	// Get a handle for our "pickingColorID" uniform
	GLuint pickingColorArrayID = glGetUniformLocation(pickingProgramID, "PickingColorArray");
	GLuint pickingColorID = glGetUniformLocation(pickingProgramID, "PickingColor");
	// Get a handle for our "LightPosition" uniform
	GLuint LightID = glGetUniformLocation(programID, "LightPosition_worldspace");

	// For speed computation
	double lastTime = glfwGetTime();
	int nbFrames = 0;

	int YDotcount = 0;

	do {
		// Measure speed
		double currentTime = glfwGetTime();
		nbFrames++;
		if (currentTime - lastTime >= 1.0) { // If last prinf() was more than 1sec ago
											 // printf and reset
			printf("%f ms/frame\n", 1000.0 / double(nbFrames));
			nbFrames = 0;
			lastTime += 1.0;
		}
		if (ShowTNB == 1)
		{
			if (YDotcount == 64)
			{
				YDotcount = 0;
			}
			Sleep(100);
		}

		// update vertex buffer each frame so that shaders can use updated vertex data (HINT: useful when dragging, changing color)
		glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);

		glBufferSubData(GL_ARRAY_BUFFER, 0, BufferSize, Vertices);	// update buffer data

																	// PICKING IS DONE HERE
																	// (Instead of picking each frame if the mouse button is down, 
																	// you should probably only check if the mouse button was just released)
		if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT)) {

			// Clear the screen in white
			glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
			glUseProgram(pickingProgramID);
			{
				if (DoubleView == 1)
				{
					ViewMatrix = glm::lookAt(
						glm::vec3(0, -1.5, -5), // Camera is at (4,3,3), in World Space
						glm::vec3(0, -1.5, 0), // and looks at the origin
						glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
					);
				}
				else if (DoubleView == 0)
				{
					ViewMatrix = glm::lookAt(
						glm::vec3(0, 0, -5), // Camera is at (4,3,3), in World Space
						glm::vec3(0, 0, 0), // and looks at the origin
						glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
					);
				}

				glm::mat4 ModelMatrix = glm::mat4 // TranslationMatrix * RotationMatrix;
				(
					1.0, 0.0, 0.0, 0.0,
					0.0, 1.0, 0.0, 0.0,
					0.0, 0.0, 1.0, 0.0,
					0.0, 0.0, 0.0, 1.0
				);

				glm::mat4 MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

				glm::vec4 Viewport = glm::vec4(0, 0, 1024, 768);

				// Send our transformation to the currently bound shader, in the "MVP" uniform
				glUniformMatrix4fv(PickingMatrixID, 1, GL_FALSE, &MVP[0][0]);

				glUniform1fv(pickingColorArrayID, IndexCount, pickingColor);	// here we pass in the picking marker array

																				//Draw Green points
																				// Only the positions are needed (not the colors)
				glEnableVertexAttribArray(0);
				glEnableVertexAttribArray(1);
				// 1rst attribute buffer : vertices
				glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);
				// Assign vertex attributes
				glVertexAttribPointer(
					0,                  // attribute
					4,                  // size
					GL_FLOAT,           // type
					GL_FALSE,           // normalized?
					VertexSize,         // stride
					(void*)0            // array buffer offset
				);

				// Index buffer
				glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId);

				// Draw the points
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					IndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
				glDisableVertexAttribArray(0);
				glDisableVertexAttribArray(1);

				if (DoubleView == 1)
				{
					ViewMatrix = glm::lookAt(
						glm::vec3(-5, 1.5, 0), // Camera is at (4,3,3), in World Space
						glm::vec3(0, 1.5, 0), // and looks at the origin
						glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
					);
				}
				else if (DoubleView == 0)
				{
					ViewMatrix = glm::lookAt(
						glm::vec3(0, 0, -5), // Camera is at (4,3,3), in World Space
						glm::vec3(0, 0, 0), // and looks at the origin
						glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
					);
				}

				ModelMatrix = glm::mat4(1.0); // TranslationMatrix * RotationMatrix;
				MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

				Viewport = glm::vec4(0, 0, 1024, 768);

				glEnableVertexAttribArray(0);
				glEnableVertexAttribArray(1);
				// 1rst attribute buffer : vertices
				glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);
				// Assign vertex attributes
				glVertexAttribPointer(
					0,                  // attribute
					4,                  // size
					GL_FLOAT,           // type
					GL_FALSE,           // normalized?
					VertexSize,         // stride
					(void*)0            // array buffer offset
				);

				// Index buffer
				glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId);

				// Draw the points
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					IndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
				glDisableVertexAttribArray(0);
				glDisableVertexAttribArray(1);

				// Wait until all the pending drawing commands are really done.
				// Ultra-mega-over slow ! 
				// There are usually a long time between glDrawElements() and
				// all the fragments completely rasterized.
				glFlush();
				glFinish();

				glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

				// Read the pixel at the center of the screen.
				// You can also use glfwGetMousePos().
				// Ultra-mega-over slow too, even for 1 pixel, 
				// because the framebuffer is on the GPU.
				double xpos, ypos;
				float zpos;
				glfwGetCursorPos(window, &xpos, &ypos);

				unsigned char data[4];
				glReadPixels(xpos, 768 - ypos, 1, 1, GL_RGBA, GL_UNSIGNED_BYTE, data); // OpenGL renders with (0,0) on bottom, mouse reports with (0,0) on top

																					   // Convert the color back to an integer ID

																					   // get z position
				glReadPixels(xpos, 768 - ypos, 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT, &zpos);
				//printf("%lf   %lf  %f\n", xpos, ypos, zpos);

				// convert from window coordinates to world coordinates
				glm::vec3 worldcord = glm::unProject(glm::vec3(xpos, 768 - ypos, zpos), ModelMatrix, ProjectionMatrix, Viewport);

				int pickedID = int(data[0]);

				if (pickedID == 255) { // Full white, must be the background !
					message = "background";
					Worldcord.Xcord = -worldcord[0];
					Worldcord.Ycord = worldcord[1];
					Worldcord.Zcord = worldcord[2];

				}
				else {

					std::ostringstream oss;
					oss << "point " << pickedID;
					message = oss.str();

					Worldcord.Xcord = -worldcord[0];
					Worldcord.Ycord = worldcord[1];
					Worldcord.Zcord = worldcord[2];

					// Change the color of selected vertice
					if (Trigger1 != 1)
					{
						TempVertice = Vertices[pickedID];

						Vertices[pickedID].RGBA[0] = 0.5f;
						Vertices[pickedID].RGBA[1] = 0.5f;
						Vertices[pickedID].RGBA[2] = 0.5f;
						Vertices[pickedID].RGBA[3] = 1.0f;
						TempID = pickedID;
						Trigger1 = 1;
						Trigger2 = 1;
						printf("Point %d Selected\n", TempID);
					}

					// Make selected vertice follow the movement of mouse

				}

				float shift = 0;        //define the shift of Ycord when double view is enabled
				if (Trigger2 != 0)
				{
					if (DoubleView == 1)
					{
						shift = -1.5;
					}
					else if (DoubleView == 0)
					{
						shift = 0;
					}
					if (pickedID == 0)
					{
						if (ZPick == 0)
						{
							CVertices[8].XYZW[0] = CVertices[0].XYZW[0] = Vertices[TempID].XYZW[0] = Worldcord.Xcord;
							CVertices[8].XYZW[1] = CVertices[0].XYZW[1] = Vertices[TempID].XYZW[1] = Worldcord.Ycord + shift;
						}
						else if (ZPick == 1)
						{
							CVertices[8].XYZW[2] = CVertices[0].XYZW[2] = Vertices[TempID].XYZW[2] = -Worldcord.Xcord;
						}
					}
					else
					{
						if (ZPick == 0)
						{
							CVertices[TempID].XYZW[0] = Vertices[TempID].XYZW[0] = Worldcord.Xcord;
							CVertices[TempID].XYZW[1] = Vertices[TempID].XYZW[1] = Worldcord.Ycord + shift;
						}
						else if (ZPick == 1)
						{
							CVertices[TempID].XYZW[2] = Vertices[TempID].XYZW[2] = -Worldcord.Xcord;
						}
						CVertices[8].XYZW[0] = CVertices[0].XYZW[0] = Vertices[0].XYZW[0];
						CVertices[8].XYZW[1] = CVertices[0].XYZW[1] = Vertices[0].XYZW[1];
						CVertices[8].XYZW[2] = CVertices[0].XYZW[2] = Vertices[0].XYZW[2];
					}

				}



			}
			// Uncomment these lines to see the picking shader in effect
			//glfwSwapBuffers(window);
			//continue; // skips the normal rendering

		}

		//Detect if key"1" was pressed
		if (glfwGetKey(window, GLFW_KEY_1) && pressed1 == 0)
		{
			pressed1 = 1;
			if (m == 0)      //if m=0,initialize CPPrev
			{
				int i = 0;
				CPRVertices[0].XYZW[0] = CVertices[0].XYZW[0];
				CPRVertices[0].XYZW[1] = CVertices[0].XYZW[1];
				CPRVertices[0].XYZW[2] = CVertices[0].XYZW[2];

				CPRVertices[1].XYZW[0] = CVertices[1].XYZW[0];
				CPRVertices[1].XYZW[1] = CVertices[1].XYZW[1];
				CPRVertices[1].XYZW[2] = CVertices[1].XYZW[2];

				CPRVertices[2].XYZW[0] = CVertices[2].XYZW[0];
				CPRVertices[2].XYZW[1] = CVertices[2].XYZW[1];
				CPRVertices[2].XYZW[2] = CVertices[2].XYZW[2];

				CPRVertices[3].XYZW[0] = CVertices[3].XYZW[0];
				CPRVertices[3].XYZW[1] = CVertices[3].XYZW[1];
				CPRVertices[3].XYZW[2] = CVertices[3].XYZW[2];

				CPRVertices[4].XYZW[0] = CVertices[4].XYZW[0];
				CPRVertices[4].XYZW[1] = CVertices[4].XYZW[1];
				CPRVertices[4].XYZW[2] = CVertices[4].XYZW[2];

				CPRVertices[5].XYZW[0] = CVertices[5].XYZW[0];
				CPRVertices[5].XYZW[1] = CVertices[5].XYZW[1];
				CPRVertices[5].XYZW[2] = CVertices[5].XYZW[2];

				CPRVertices[6].XYZW[0] = CVertices[6].XYZW[0];
				CPRVertices[6].XYZW[1] = CVertices[6].XYZW[1];
				CPRVertices[6].XYZW[2] = CVertices[6].XYZW[2];

				CPRVertices[7].XYZW[0] = CVertices[7].XYZW[0];
				CPRVertices[7].XYZW[1] = CVertices[7].XYZW[1];
				CPRVertices[7].XYZW[2] = CVertices[7].XYZW[2];

				CPRVertices[8].XYZW[0] = CVertices[8].XYZW[0];
				CPRVertices[8].XYZW[1] = CVertices[8].XYZW[1];
				CPRVertices[8].XYZW[2] = CVertices[8].XYZW[2];
			}
			k = m;
			m = (m + 1) % 5;
			prepoints = 8 * pow(2, k);
			while (TempID1 < prepoints)
			{
				if (TempID1 == 0)
				{
					CPPVertices[0].XYZW[0] = (CPRVertices[prepoints - 2].XYZW[0] + 10 * CPRVertices[prepoints - 1].XYZW[0] + 5 * CPRVertices[0].XYZW[0]) / 16;
					CPPVertices[0].XYZW[1] = (CPRVertices[prepoints - 2].XYZW[1] + 10 * CPRVertices[prepoints - 1].XYZW[1] + 5 * CPRVertices[0].XYZW[1]) / 16;
					CPPVertices[0].XYZW[2] = (CPRVertices[prepoints - 2].XYZW[2] + 10 * CPRVertices[prepoints - 1].XYZW[2] + 5 * CPRVertices[0].XYZW[2]) / 16;

					CPPVertices[1].XYZW[0] = (5 * CPRVertices[prepoints - 1].XYZW[0] + 10 * CPRVertices[0].XYZW[0] + CPRVertices[0].XYZW[0]) / 16;
					CPPVertices[1].XYZW[1] = (5 * CPRVertices[prepoints - 1].XYZW[1] + 10 * CPRVertices[0].XYZW[1] + CPRVertices[0].XYZW[1]) / 16;
					CPPVertices[1].XYZW[2] = (5 * CPRVertices[prepoints - 1].XYZW[2] + 10 * CPRVertices[0].XYZW[2] + CPRVertices[0].XYZW[2]) / 16;
				}
				else if (TempID1 == 1)
				{
					CPPVertices[2].XYZW[0] = (CPRVertices[prepoints - 1].XYZW[0] + 10 * CPRVertices[0].XYZW[0] + 5 * CPRVertices[1].XYZW[0]) / 16;
					CPPVertices[2].XYZW[1] = (CPRVertices[prepoints - 1].XYZW[1] + 10 * CPRVertices[0].XYZW[1] + 5 * CPRVertices[1].XYZW[1]) / 16;
					CPPVertices[2].XYZW[2] = (CPRVertices[prepoints - 1].XYZW[2] + 10 * CPRVertices[0].XYZW[2] + 5 * CPRVertices[1].XYZW[2]) / 16;

					CPPVertices[3].XYZW[0] = (5 * CPRVertices[0].XYZW[0] + 10 * CPRVertices[1].XYZW[0] + CPRVertices[2].XYZW[0]) / 16;
					CPPVertices[3].XYZW[1] = (5 * CPRVertices[0].XYZW[1] + 10 * CPRVertices[1].XYZW[1] + CPRVertices[2].XYZW[1]) / 16;
					CPPVertices[3].XYZW[2] = (5 * CPRVertices[0].XYZW[2] + 10 * CPRVertices[1].XYZW[2] + CPRVertices[2].XYZW[2]) / 16;

				}
				else
				{
					CPPVertices[2 * TempID1].XYZW[0] = (CPRVertices[TempID1 - 2].XYZW[0] + 10 * CPRVertices[TempID1 - 1].XYZW[0] + 5 * CPRVertices[TempID1].XYZW[0]) / 16;
					CPPVertices[2 * TempID1].XYZW[1] = (CPRVertices[TempID1 - 2].XYZW[1] + 10 * CPRVertices[TempID1 - 1].XYZW[1] + 5 * CPRVertices[TempID1].XYZW[1]) / 16;
					CPPVertices[2 * TempID1].XYZW[2] = (CPRVertices[TempID1 - 2].XYZW[2] + 10 * CPRVertices[TempID1 - 1].XYZW[2] + 5 * CPRVertices[TempID1].XYZW[2]) / 16;

					CPPVertices[2 * TempID1 + 1].XYZW[0] = (5 * CPRVertices[TempID1 - 1].XYZW[0] + 10 * CPRVertices[TempID1].XYZW[0] + CPRVertices[TempID1 + 1].XYZW[0]) / 16;
					CPPVertices[2 * TempID1 + 1].XYZW[1] = (5 * CPRVertices[TempID1 - 1].XYZW[1] + 10 * CPRVertices[TempID1].XYZW[1] + CPRVertices[TempID1 + 1].XYZW[1]) / 16;
					CPPVertices[2 * TempID1 + 1].XYZW[2] = (5 * CPRVertices[TempID1 - 1].XYZW[2] + 10 * CPRVertices[TempID1].XYZW[2] + CPRVertices[TempID1 + 1].XYZW[2]) / 16;

				}

				TempID1 += 1;
			}
			//reset the TempID1 to 0;
			TempID1 = 0;
			////when TempID1=prepoints
			CPPVertices[2 * prepoints].XYZW[0] = CPPVertices[0].XYZW[0];
			CPPVertices[2 * prepoints].XYZW[1] = CPPVertices[0].XYZW[1];
			CPPVertices[2 * prepoints].XYZW[2] = CPPVertices[0].XYZW[2];

			//store the doubled points to CPRVertices[]
			while (TempID1 <= 2 * prepoints)
			{
				CPRVertices[TempID1].XYZW[0] = CPPVertices[TempID1].XYZW[0];
				CPRVertices[TempID1].XYZW[1] = CPPVertices[TempID1].XYZW[1];
				CPRVertices[TempID1].XYZW[2] = CPPVertices[TempID1].XYZW[2];
				TempID1 += 1;
			}
			//reset the TempID1 to 0;
			TempID1 = 0;

			printf("key1 pressed! m:%d, prepoints:%d\n", m, prepoints);

		}

		//reset the status of key 1
		if (glfwGetKey(window, GLFW_KEY_1) == GLFW_RELEASE&&pressed1 == 1)
		{
			pressed1 = 0;
		}


		//Detect if key"2" was pressed
		if (glfwGetKey(window, GLFW_KEY_2) && pressed2 == 0)
		{
			pressed2 = 1;
			TempID2 = 0;
			//calculate the coordinates of Control Points of 8 Bezier Curve Pieces 
			while (TempID2 < 8)
			{   //Ci,0,i=TempID2
				BPVertices[4 * TempID2 + 0].XYZW[0] = 0.0416667 * CVertices[((TempID2 - 2) + 8) % 8].XYZW[0] + 0.4583333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[0] + 0.4583333 * CVertices[TempID2].XYZW[0] + 0.0416667 * CVertices[(TempID2 + 1) % 8].XYZW[0];
				BPVertices[4 * TempID2 + 0].XYZW[1] = 0.0416667 * CVertices[((TempID2 - 2) + 8) % 8].XYZW[1] + 0.4583333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[1] + 0.4583333 * CVertices[TempID2].XYZW[1] + 0.0416667 * CVertices[(TempID2 + 1) % 8].XYZW[1];
				BPVertices[4 * TempID2 + 0].XYZW[2] = 0.0416667 * CVertices[((TempID2 - 2) + 8) % 8].XYZW[2] + 0.4583333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[2] + 0.4583333 * CVertices[TempID2].XYZW[2] + 0.0416667 * CVertices[(TempID2 + 1) % 8].XYZW[2];
				//Ci,1
				BPVertices[4 * TempID2 + 1].XYZW[0] = 0.3333333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[0] + 0.5833333 * CVertices[TempID2].XYZW[0] + 0.0833333 * CVertices[(TempID2 + 1) % 8].XYZW[0];
				BPVertices[4 * TempID2 + 1].XYZW[1] = 0.3333333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[1] + 0.5833333 * CVertices[TempID2].XYZW[1] + 0.0833333 * CVertices[(TempID2 + 1) % 8].XYZW[1];
				BPVertices[4 * TempID2 + 1].XYZW[2] = 0.3333333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[2] + 0.5833333 * CVertices[TempID2].XYZW[2] + 0.0833333 * CVertices[(TempID2 + 1) % 8].XYZW[2];
				//Ci,2
				BPVertices[4 * TempID2 + 2].XYZW[0] = 0.1666667 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[0] + 0.6666667 * CVertices[TempID2].XYZW[0] + 0.1666667 * CVertices[(TempID2 + 1) % 8].XYZW[0];
				BPVertices[4 * TempID2 + 2].XYZW[1] = 0.1666667 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[1] + 0.6666667 * CVertices[TempID2].XYZW[1] + 0.1666667 * CVertices[(TempID2 + 1) % 8].XYZW[1];
				BPVertices[4 * TempID2 + 2].XYZW[2] = 0.1666667 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[2] + 0.6666667 * CVertices[TempID2].XYZW[2] + 0.1666667 * CVertices[(TempID2 + 1) % 8].XYZW[2];
				//Ci,3
				BPVertices[4 * TempID2 + 3].XYZW[0] = 0.0833333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[0] + 0.5833333 * CVertices[TempID2].XYZW[0] + 0.3333333 * CVertices[(TempID2 + 1) % 8].XYZW[0];
				BPVertices[4 * TempID2 + 3].XYZW[1] = 0.0833333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[1] + 0.5833333 * CVertices[TempID2].XYZW[1] + 0.3333333 * CVertices[(TempID2 + 1) % 8].XYZW[1];
				BPVertices[4 * TempID2 + 3].XYZW[2] = 0.0833333 * CVertices[((TempID2 - 1) + 8) % 8].XYZW[2] + 0.5833333 * CVertices[TempID2].XYZW[2] + 0.3333333 * CVertices[(TempID2 + 1) % 8].XYZW[2];

				TempID2 += 1;
			}
			BPVertices[32].XYZW[0] = BPVertices[0].XYZW[0];
			BPVertices[32].XYZW[1] = BPVertices[0].XYZW[1];
			BPVertices[32].XYZW[2] = BPVertices[0].XYZW[2];
			//reset the TempID2 to 0;
			TempID2 = 0;


			//calculate the coordinates of Evaluation Points 
			//After apply the De Casteljau's algorithm,
			//The formula for a Bezier curve of degree 4 is: B(t)=(1-t)^4*P0+4*(1-t)^3*t*P1+6*(1-t)^2*t^2*P2+4*(1-t)*t^3*P3+t^4*P4
			TempID3 = 0;
			while (TempID3 < 8)
			{
				//EPVertices[8 * TempID3 + 0].XYZW[0] = pow((1 - t), 4) * BPVertices[4 * TempID3 + 0].XYZW[0] + 4 * pow((1 - t), 3) * t * BPVertices[4 * TempID3 + 1].XYZW[0] + 6 * pow((1 - t), 2) * pow(t, 2) * BPVertices[4 * TempID3 + 2].XYZW[0] + 4 * (1 - t) * pow(t, 3) * BPVertices[4 * TempID3 + 3].XYZW[0] + pow(t, 4) * BPVertices[4 * TempID3 + 4].XYZW[0];
				//t=0,i=TempID2
				EPVertices[8 * TempID3 + 0].XYZW[0] = 1 * BPVertices[4 * TempID3 + 0].XYZW[0] + 4 * 0 * BPVertices[4 * TempID3 + 1].XYZW[0] + 6 * 0 * BPVertices[4 * TempID3 + 2].XYZW[0] + 4 * 0 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 0].XYZW[1] = 1 * BPVertices[4 * TempID3 + 0].XYZW[1] + 4 * 0 * BPVertices[4 * TempID3 + 1].XYZW[1] + 6 * 0 * BPVertices[4 * TempID3 + 2].XYZW[1] + 4 * 0 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 0].XYZW[2] = 1 * BPVertices[4 * TempID3 + 0].XYZW[2] + 4 * 0 * BPVertices[4 * TempID3 + 1].XYZW[2] + 6 * 0 * BPVertices[4 * TempID3 + 2].XYZW[2] + 4 * 0 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=1/8
				EPVertices[8 * TempID3 + 1].XYZW[0] = 0.5861816 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.3349609 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.0068359 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.0002441 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 1].XYZW[1] = 0.5861816 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.3349609 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.0068359 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.0002441 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 1].XYZW[2] = 0.5861816 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.3349609 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.0068359 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.0002441 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=1/4
				EPVertices[8 * TempID3 + 2].XYZW[0] = 0.3164062 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.4218750 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.0468750 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.0039063 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 2].XYZW[1] = 0.3164062 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.4218750 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.0468750 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.0039063 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 2].XYZW[2] = 0.3164062 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.4218750 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.0468750 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.0039063 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=3/8
				EPVertices[8 * TempID3 + 3].XYZW[0] = 0.1525879 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.3662109 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.1318359 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.0197754 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 3].XYZW[1] = 0.1525879 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.3662109 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.1318359 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.0197754 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 3].XYZW[2] = 0.1525879 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.3662109 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.1318359 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.0197754 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=1/2
				EPVertices[8 * TempID3 + 4].XYZW[0] = 0.0625000 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.2500000 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.3750000 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.2500000 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.0625000 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 4].XYZW[1] = 0.0625000 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.2500000 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.3750000 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.2500000 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.0625000 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 4].XYZW[2] = 0.0625000 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.2500000 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.3750000 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.2500000 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.0625000 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=5/8
				EPVertices[8 * TempID3 + 5].XYZW[0] = 0.0197754 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.1318359 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.3662109 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.1525879 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 5].XYZW[1] = 0.0197754 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.1318359 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.3662109 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.1525879 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 5].XYZW[2] = 0.0197754 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.1318359 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.3295898 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.3662109 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.1525879 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=3/4
				EPVertices[8 * TempID3 + 6].XYZW[0] = 0.0039063 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.0468750 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.4218750 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.3164062 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 6].XYZW[1] = 0.0039063 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.0468750 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.4218750 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.3164062 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 6].XYZW[2] = 0.0039063 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.0468750 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.2109375 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.4218750 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.3164062 * BPVertices[4 * TempID3 + 4].XYZW[2];
				//t=7/8
				EPVertices[8 * TempID3 + 7].XYZW[0] = 0.0002441 * BPVertices[4 * TempID3 + 0].XYZW[0] + 0.0068359 * BPVertices[4 * TempID3 + 1].XYZW[0] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[0] + 0.3349609 * BPVertices[4 * TempID3 + 3].XYZW[0] + 0.5861816 * BPVertices[4 * TempID3 + 4].XYZW[0];
				EPVertices[8 * TempID3 + 7].XYZW[1] = 0.0002441 * BPVertices[4 * TempID3 + 0].XYZW[1] + 0.0068359 * BPVertices[4 * TempID3 + 1].XYZW[1] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[1] + 0.3349609 * BPVertices[4 * TempID3 + 3].XYZW[1] + 0.5861816 * BPVertices[4 * TempID3 + 4].XYZW[1];
				EPVertices[8 * TempID3 + 7].XYZW[2] = 0.0002441 * BPVertices[4 * TempID3 + 0].XYZW[2] + 0.0068359 * BPVertices[4 * TempID3 + 1].XYZW[2] + 0.0717773 * BPVertices[4 * TempID3 + 2].XYZW[2] + 0.3349609 * BPVertices[4 * TempID3 + 3].XYZW[2] + 0.5861816 * BPVertices[4 * TempID3 + 4].XYZW[2];

				TempID3 += 1;
			}
			EPVertices[64].XYZW[0] = EPVertices[0].XYZW[0];
			EPVertices[64].XYZW[1] = EPVertices[0].XYZW[1];
			EPVertices[64].XYZW[2] = EPVertices[0].XYZW[2];

			TempID3 = 0;
			ShowBezier = 1 - ShowBezier;
			printf("key2 pressed! X:%f, \n", EPVertices[32].XYZW[0]);
		}
		//reset the status of key 2
		if (glfwGetKey(window, GLFW_KEY_2) == GLFW_RELEASE&&pressed2 == 1)
		{
			pressed2 = 0;
		}

		if ((glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT) == GLFW_RELEASE) && Trigger1 != 0)
		{
			Vertices[TempID].RGBA[0] = TempVertice.RGBA[0];
			Vertices[TempID].RGBA[1] = TempVertice.RGBA[1];
			Vertices[TempID].RGBA[2] = TempVertice.RGBA[2];
			Vertices[TempID].RGBA[3] = TempVertice.RGBA[3];
			printf("Point %d Released\n", TempID);
			TempID = 8;
			Trigger1 = 0;
			Trigger2 = 0;
			glClearColor(0.0f, 0.0f, 0.4f, 0.0f);
			// Re-clear the screen for real rendering
		}

		//Detect if key"Left Shift" or "Left Shift" was pressed
		if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT)) && ZPick == 0)
		{
			ZPick = 1;
			printf("key shift pressed!  ZPick:%d\n", ZPick);
		}

		//reset the status of key Left Shift and Right Shift
		if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE && (glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_RELEASE) && ZPick == 1)
		{
			ZPick = 0;
			printf("key shift released!  ZPick:%d\n", ZPick);
		}

		//Detect if key"4" was pressed
		if (glfwGetKey(window, GLFW_KEY_4) && pressed4 == 0)
		{
			pressed4 = 1;
			DoubleView = 1 - DoubleView;
			printf("key 4 pressed!  DoubleView:%d\n", DoubleView);
		}

		//reset the status of key 4
		if (glfwGetKey(window, GLFW_KEY_4) == GLFW_RELEASE && pressed4 == 1)
		{
			pressed4 = 0;
			printf("key 4 released!\n");
		}

		//Detect if key"5" was pressed
		if (glfwGetKey(window, GLFW_KEY_5) && pressed5 == 0)
		{
			int Ycount = 0;
			pressed5 = 1;
			ShowTNB = 1 - ShowTNB;
			printf("key 5 pressed! ShowTNB:%d\n", ShowTNB);
			Ycount++;

		}

		//Reset the status of key 5
		if (glfwGetKey(window, GLFW_KEY_5) == GLFW_RELEASE && pressed5 == 1)
		{
			pressed5 = 0;
			printf("key 5 released!\n");
		}

		//Calculate the tagent, normal and binormal
		if (ShowTNB == 1)
		{
			//Calculate the position of yellow points
			TVertices[0].XYZW[0] = NVertices[0].XYZW[0] = BNVertices[0].XYZW[0] = YVertices[0].XYZW[0] = EPVertices[YDotcount].XYZW[0];
			TVertices[0].XYZW[1] = NVertices[0].XYZW[1] = BNVertices[0].XYZW[1] = YVertices[0].XYZW[1] = EPVertices[YDotcount].XYZW[1];
			TVertices[0].XYZW[2] = NVertices[0].XYZW[2] = BNVertices[0].XYZW[2] = YVertices[0].XYZW[2] = EPVertices[YDotcount].XYZW[2];

			//Calculate Tangent
			//The formula for the first deravitive of a Bezier curve of degree 4 is: B'(t)=4*(1-t)^3*(P1-P0)+12*(1-t)^2*t*(P2-P1)+12*(1-t)*t^2*(P3-P2)+4*t^3*(P4-P3)
			int TCase = YDotcount % 8;      //determine the value of t
			int BPCase = YDotcount / 8;     //determine current Bezier Piece
			float normalizer = 0;           //normalize the tangent vector
			float t = float(TCase) / float(8);
			//Calculate the position of TVertices
			TVertices[1].XYZW[0] = 4 * (1 - t) * (1 - t) * (1 - t) * (BPVertices[4 * BPCase + 1].XYZW[0] - BPVertices[4 * BPCase + 0].XYZW[0])
				+ 12 * (1 - t) * (1 - t) * t * (BPVertices[4 * BPCase + 2].XYZW[0] - BPVertices[4 * BPCase + 1].XYZW[0])
				+ 12 * (1 - t) * t * t * (BPVertices[4 * BPCase + 3].XYZW[0] - BPVertices[4 * BPCase + 2].XYZW[0])
				+ 4 * t * t * t * (BPVertices[4 * BPCase + 4].XYZW[0] - BPVertices[4 * BPCase + 3].XYZW[0]);
			TVertices[1].XYZW[1] = 4 * (1 - t) * (1 - t) * (1 - t) * (BPVertices[4 * BPCase + 1].XYZW[1] - BPVertices[4 * BPCase + 0].XYZW[1])
				+ 12 * (1 - t) * (1 - t) * t * (BPVertices[4 * BPCase + 2].XYZW[1] - BPVertices[4 * BPCase + 1].XYZW[1])
				+ 12 * (1 - t) * t * t * (BPVertices[4 * BPCase + 3].XYZW[1] - BPVertices[4 * BPCase + 2].XYZW[1])
				+ 4 * t * t * t * (BPVertices[4 * BPCase + 4].XYZW[1] - BPVertices[4 * BPCase + 3].XYZW[1]);
			TVertices[1].XYZW[2] = 4 * (1 - t) * (1 - t) * (1 - t) * (BPVertices[4 * BPCase + 1].XYZW[2] - BPVertices[4 * BPCase + 0].XYZW[2])
				+ 12 * (1 - t) * (1 - t) * t * (BPVertices[4 * BPCase + 2].XYZW[2] - BPVertices[4 * BPCase + 1].XYZW[2])
				+ 12 * (1 - t) * t * t * (BPVertices[4 * BPCase + 3].XYZW[2] - BPVertices[4 * BPCase + 2].XYZW[2])
				+ 4 * t * t * t * (BPVertices[4 * BPCase + 4].XYZW[2] - BPVertices[4 * BPCase + 3].XYZW[2]);
			normalizer = 2 * (sqrtf(TVertices[1].XYZW[0] * TVertices[1].XYZW[0] + TVertices[1].XYZW[1] * TVertices[1].XYZW[1] + TVertices[1].XYZW[2] * TVertices[1].XYZW[2]));

			//Store Tangent
			GTTemp.XYZW[0] = TVertices[1].XYZW[0];
			GTTemp.XYZW[1] = TVertices[1].XYZW[1];
			GTTemp.XYZW[2] = TVertices[1].XYZW[2];

			//Normalization
			TVertices[1].XYZW[0] = TVertices[1].XYZW[0] / normalizer + TVertices[0].XYZW[0];
			TVertices[1].XYZW[1] = TVertices[1].XYZW[1] / normalizer + TVertices[0].XYZW[1];
			TVertices[1].XYZW[2] = TVertices[1].XYZW[2] / normalizer + TVertices[0].XYZW[2];

			//Calculate Binormal
			BNTemp1.XYZW[0] = EPVertices[(YDotcount - 1 + 64) % 64].XYZW[0] - EPVertices[YDotcount].XYZW[0];
			BNTemp1.XYZW[1] = EPVertices[(YDotcount - 1 + 64) % 64].XYZW[1] - EPVertices[YDotcount].XYZW[1];
			BNTemp1.XYZW[2] = EPVertices[(YDotcount - 1 + 64) % 64].XYZW[2] - EPVertices[YDotcount].XYZW[2];

			BNTemp2.XYZW[0] = EPVertices[(YDotcount + 1) % 64].XYZW[0] - EPVertices[YDotcount].XYZW[0];
			BNTemp2.XYZW[1] = EPVertices[(YDotcount + 1) % 64].XYZW[1] - EPVertices[YDotcount].XYZW[1];
			BNTemp2.XYZW[2] = EPVertices[(YDotcount + 1) % 64].XYZW[2] - EPVertices[YDotcount].XYZW[2];

			BNVertices[1].XYZW[0] = BNTemp1.XYZW[1] * BNTemp2.XYZW[2] - BNTemp1.XYZW[2] * BNTemp2.XYZW[1];
			BNVertices[1].XYZW[1] = BNTemp1.XYZW[2] * BNTemp2.XYZW[0] - BNTemp1.XYZW[0] * BNTemp2.XYZW[2];
			BNVertices[1].XYZW[2] = BNTemp1.XYZW[0] * BNTemp2.XYZW[1] - BNTemp1.XYZW[1] * BNTemp2.XYZW[0];

			normalizer = 2 * (sqrtf(BNVertices[1].XYZW[0] * BNVertices[1].XYZW[0] + BNVertices[1].XYZW[1] * BNVertices[1].XYZW[1] + BNVertices[1].XYZW[2] * BNVertices[1].XYZW[2]));

			//Store Binormal
			GBNTemp.XYZW[0] = BNVertices[1].XYZW[0];
			GBNTemp.XYZW[1] = BNVertices[1].XYZW[1];
			GBNTemp.XYZW[2] = BNVertices[1].XYZW[2];

			//Normalization
			BNVertices[1].XYZW[0] = BNVertices[1].XYZW[0] / normalizer + BNVertices[0].XYZW[0];
			BNVertices[1].XYZW[1] = BNVertices[1].XYZW[1] / normalizer + BNVertices[0].XYZW[1];
			BNVertices[1].XYZW[2] = BNVertices[1].XYZW[2] / normalizer + BNVertices[0].XYZW[2];

			//Calculate Normal, Normal is perpendicular to both tangent and binormal
			NVertices[1].XYZW[0] = GBNTemp.XYZW[1] * GTTemp.XYZW[2] - GBNTemp.XYZW[2] * GTTemp.XYZW[1];
			NVertices[1].XYZW[1] = GBNTemp.XYZW[2] * GTTemp.XYZW[0] - GBNTemp.XYZW[0] * GTTemp.XYZW[2];
			NVertices[1].XYZW[2] = GBNTemp.XYZW[0] * GTTemp.XYZW[1] - GBNTemp.XYZW[1] * GTTemp.XYZW[0];

			normalizer = 2 * (sqrtf(NVertices[1].XYZW[0] * NVertices[1].XYZW[0] + NVertices[1].XYZW[1] * NVertices[1].XYZW[1] + NVertices[1].XYZW[2] * NVertices[1].XYZW[2]));

			//Normalization
			NVertices[1].XYZW[0] = NVertices[1].XYZW[0] / normalizer + NVertices[0].XYZW[0];
			NVertices[1].XYZW[1] = NVertices[1].XYZW[1] / normalizer + NVertices[0].XYZW[1];
			NVertices[1].XYZW[2] = NVertices[1].XYZW[2] / normalizer + NVertices[0].XYZW[2];

		}

		// Dark blue background
		glClearColor(0.0f, 0.0f, 0.4f, 0.0f);
		// Re-clear the screen for real rendering
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// Use our shader
		glUseProgram(programID);
		{
			if (DoubleView == 1)
			{
				ViewMatrix = glm::lookAt(
					glm::vec3(0, -1.5, -5), // Camera is at (4,3,3), in World Space
					glm::vec3(0, -1.5, 0), // and looks at the origin
					glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
				);
			}
			else if (DoubleView == 0)
			{
				ViewMatrix = glm::lookAt(
					glm::vec3(0, 0, -5), // Camera is at (4,3,3), in World Space
					glm::vec3(0, 0, 0), // and looks at the origin
					glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
				);
			}

			glm::mat4 ModelMatrix = glm::mat4(1.0); // TranslationMatrix * RotationMatrix;
			glm::mat4 MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

			// Send our transformation to the currently bound shader, 
			// in the "MVP" uniform
			glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);
			glUniformMatrix4fv(ModelMatrixID, 1, GL_FALSE, &ModelMatrix[0][0]);
			glUniformMatrix4fv(ViewMatrixID, 1, GL_FALSE, &ViewMatrix[0][0]);

			glm::vec3 lightPos = glm::vec3(4, 4, 4);
			glUniform3f(LightID, lightPos.x, lightPos.y, lightPos.z);


			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);
			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);
			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				VertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : colors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				VertexSize,         // stride
				(GLvoid*)RgbOffset  // array buffer offset
			);

			// Index buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId);

			// Draw the triangles !
			glEnable(GL_PROGRAM_POINT_SIZE);
			glDrawElements(
				GL_POINTS,      // mode
				IndexCount,    // count
				GL_UNSIGNED_SHORT,   // type
				(void*)0           // element array buffer offset
			);

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//start to draw white lines
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : Cvertices
			glBindBuffer(GL_ARRAY_BUFFER, CVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, CBufferSize, CVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CVertexSize,         // stride
				(GLvoid*)CRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CIndexBufferId);

			// Draw the lines !
			glDrawArrays(GL_LINE_STRIP, 0, 9);

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Doubled Poinits and Lines
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, CPRVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, CPRBufferSize, CPRVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CPRVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CPRVertexSize,         // stride
				(GLvoid*)CPRRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CPRIndexBufferId);

			// Draw the lines !
			if (m != 0)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2 * prepoints + 1);
			}


			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Bezier Piece Control Points
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, BPVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, BPBufferSize, BPVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BPVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BPVertexSize,         // stride
				(GLvoid*)BPRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BPIndexBufferId);

			// Draw the Control Points !
			if (ShowBezier == 1)
			{
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					BPIndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw the Evaluation Points 
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : EPvertices
			glBindBuffer(GL_ARRAY_BUFFER, EPVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, EPBufferSize, EPVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				EPVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : colors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				EPVertexSize,         // stride
				(GLvoid*)EPRgbOffset  // array buffer offset
			);

			// EPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EPIndexBufferId);

			// Draw the Evaluation Points and Curves !
			if (ShowBezier == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 65);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Yellow Dots
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, YVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, YBufferSize, YVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				YVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				YVertexSize,         // stride
				(GLvoid*)YRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, YIndexBufferId);

			// Draw the lines !
			if (ShowTNB == 1)
			{
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					YIndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Tangent on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, TVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, TBufferSize, TVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				TVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				TVertexSize,         // stride
				(GLvoid*)TRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TIndexBufferId);

			// Draw the Tangent !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Binormal	 on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, BNVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, BNBufferSize, BNVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BNVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BNVertexSize,         // stride
				(GLvoid*)BNRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BNIndexBufferId);

			// Draw the Binormal !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Normal on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, NVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, NBufferSize, NVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				NVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				NVertexSize,         // stride
				(GLvoid*)NRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, NIndexBufferId);

			// Draw the Normal !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);


			if (DoubleView == 1)
			{
				ViewMatrix = glm::lookAt(
					glm::vec3(-5, 1.5, 0), // Camera is at (4,3,3), in World Space
					glm::vec3(0, 1.5, 0), // and looks at the origin
					glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
				);
			}
			else if (DoubleView == 0)
			{
				ViewMatrix = glm::lookAt(
					glm::vec3(0, 0, -5), // Camera is at (4,3,3), in World Space
					glm::vec3(0, 0, 0), // and looks at the origin
					glm::vec3(0, 1, 0)  // Head is up (set to 0,-1,0 to look upside-down)
				);
			}

			ModelMatrix = glm::mat4(1.0); // TranslationMatrix * RotationMatrix;
			MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

			// Send our transformation to the currently bound shader, 
			// in the "MVP" uniform
			glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);
			glUniformMatrix4fv(ModelMatrixID, 1, GL_FALSE, &ModelMatrix[0][0]);
			glUniformMatrix4fv(ViewMatrixID, 1, GL_FALSE, &ViewMatrix[0][0]);

			lightPos = glm::vec3(4, 4, 4);
			glUniform3f(LightID, lightPos.x, lightPos.y, lightPos.z);


			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);
			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, VertexBufferId);
			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				VertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : colors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				VertexSize,         // stride
				(GLvoid*)RgbOffset  // array buffer offset
			);

			// Index buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId);

			// Draw the triangles !
			glEnable(GL_PROGRAM_POINT_SIZE);
			glDrawElements(
				GL_POINTS,      // mode
				IndexCount,    // count
				GL_UNSIGNED_SHORT,   // type
				(void*)0           // element array buffer offset
			);

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//start to draw white lines
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : Cvertices
			glBindBuffer(GL_ARRAY_BUFFER, CVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, CBufferSize, CVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CVertexSize,         // stride
				(GLvoid*)CRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CIndexBufferId);

			// Draw the lines !
			glDrawArrays(GL_LINE_STRIP, 0, 9);

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Doubled Poinits and Lines
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, CPRVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, CPRBufferSize, CPRVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CPRVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				CPRVertexSize,         // stride
				(GLvoid*)CPRRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, CPRIndexBufferId);

			// Draw the lines !
			if (m != 0)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2 * prepoints + 1);
			}


			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Bezier Piece Control Points
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, BPVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, BPBufferSize, BPVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BPVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BPVertexSize,         // stride
				(GLvoid*)BPRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BPIndexBufferId);

			// Draw the Control Points !
			if (ShowBezier == 1)
			{
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					BPIndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw the Evaluation Points 
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : EPvertices
			glBindBuffer(GL_ARRAY_BUFFER, EPVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, EPBufferSize, EPVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				EPVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : colors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				EPVertexSize,         // stride
				(GLvoid*)EPRgbOffset  // array buffer offset
			);

			// EPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EPIndexBufferId);

			// Draw the Evaluation Points and Curves !
			if (ShowBezier == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 65);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Yellow Dots
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : vertices
			glBindBuffer(GL_ARRAY_BUFFER, YVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, YBufferSize, YVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				YVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				YVertexSize,         // stride
				(GLvoid*)YRgbOffset  // array buffer offset
			);

			// CIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, YIndexBufferId);

			// Draw the lines !
			if (ShowTNB == 1)
			{
				glEnable(GL_PROGRAM_POINT_SIZE);
				glDrawElements(
					GL_POINTS,      // mode
					YIndexCount,    // count
					GL_UNSIGNED_SHORT,   // type
					(void*)0           // element array buffer offset
				);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Tangent on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, TVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, TBufferSize, TVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				TVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				TVertexSize,         // stride
				(GLvoid*)TRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TIndexBufferId);

			// Draw the Tangent !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Binormal	 on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, BNVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, BNBufferSize, BNVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BNVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				BNVertexSize,         // stride
				(GLvoid*)BNRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BNIndexBufferId);

			// Draw the Binormal !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);

			//Draw Normal on the Yellow Dot
			glEnableVertexAttribArray(0);
			glEnableVertexAttribArray(1);

			// 1rst attribute buffer : BPvertices
			glBindBuffer(GL_ARRAY_BUFFER, NVertexBufferId);
			glBufferSubData(GL_ARRAY_BUFFER, 0, NBufferSize, NVertices);

			glVertexAttribPointer(
				0,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				NVertexSize,         // stride
				(void*)0            // array buffer offset
			);

			// 2nd attribute buffer : Ccolors
			glVertexAttribPointer(
				1,                  // attribute
				4,                  // size
				GL_FLOAT,           // type
				GL_FALSE,           // normalized?
				NVertexSize,         // stride
				(GLvoid*)NRgbOffset  // array buffer offset
			);

			// BPIndex buffer
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, NIndexBufferId);

			// Draw the Normal !
			if (ShowTNB == 1)
			{
				glDrawArrays(GL_LINE_STRIP, 0, 2);
			}

			glDisableVertexAttribArray(0);
			glDisableVertexAttribArray(1);


			if (ShowTNB == 1)
			{
				YDotcount++;
			}

		}
		// Draw GUI
		TwDraw();

		// Swap buffers
		glfwSwapBuffers(window);
		glfwPollEvents();

	} // Check if the ESC key was pressed or the window was closed
	while (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS &&
		glfwWindowShouldClose(window) == 0);

	// Cleanup VBO and shader
	glDeleteBuffers(1, &VertexBufferId);
	glDeleteBuffers(1, &CVertexBufferId);
	glDeleteBuffers(1, &CPPVertexBufferId);
	glDeleteBuffers(1, &CPRVertexBufferId);
	glDeleteBuffers(1, &BPVertexBufferId);
	glDeleteBuffers(1, &EPVertexBufferId);
	glDeleteBuffers(1, &YVertexBufferId);
	glDeleteBuffers(1, &TVertexBufferId);
	glDeleteBuffers(1, &NVertexBufferId);
	glDeleteBuffers(1, &BNVertexBufferId);

	glDeleteBuffers(1, &IndexBufferId);
	glDeleteBuffers(1, &CIndexBufferId);
	glDeleteBuffers(1, &CPPIndexBufferId);
	glDeleteBuffers(1, &CPRIndexBufferId);
	glDeleteBuffers(1, &BPIndexBufferId);
	glDeleteBuffers(1, &EPIndexBufferId);
	glDeleteBuffers(1, &YIndexBufferId);
	glDeleteBuffers(1, &TIndexBufferId);
	glDeleteBuffers(1, &NIndexBufferId);
	glDeleteBuffers(1, &BNIndexBufferId);

	glDeleteProgram(programID);
	glDeleteProgram(pickingProgramID);

	glDeleteVertexArrays(1, &VertexArrayId);
	glDeleteVertexArrays(1, &CVertexArrayId);
	glDeleteVertexArrays(1, &CPPVertexArrayId);
	glDeleteVertexArrays(1, &CPRVertexArrayId);
	glDeleteVertexArrays(1, &BPVertexArrayId);
	glDeleteVertexArrays(1, &EPVertexArrayId);
	glDeleteVertexArrays(1, &YVertexArrayId);
	glDeleteVertexArrays(1, &TVertexArrayId);
	glDeleteVertexArrays(1, &NVertexArrayId);
	glDeleteVertexArrays(1, &BNVertexArrayId);

	// Close OpenGL window and terminate GLFW
	glfwTerminate();

	return 0;
}

