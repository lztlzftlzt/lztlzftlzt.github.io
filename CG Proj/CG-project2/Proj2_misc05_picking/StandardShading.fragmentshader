#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection2_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition2_worldspace;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(0.62,0.6,0.3);
	float LightPower = 100.0f;
	vec3 LightColor2 = vec3(1.0,0.8,0.5);
	float LightPower2 = 100.0f;
	
	// Vertex Material properties
	vec3 MaterialDiffuseColor = vs_vertexColor.rgb;
	vec3 MaterialAmbientColor = vs_vertexColor.rgb;
	vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;

	// Light Material properties
	vec3 LightDiffuseColor = vec3(0.5, 0.5, 0.5);
	vec3 LightAmbientColor = vec3(0.1, 0.1, 0.1);
	vec3 LightSpecularColor = vec3(0.8, 0.8, 0.8);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	float distance2 = length( LightPosition2_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( -LightDirection_cameraspace );
	vec3 l2 = normalize( -LightDirection2_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float cosTheta2 = clamp( dot( n,l2 ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	vec3 R2 = reflect(-l2,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	float cosAlpha2 = clamp( dot( E,R2 ), 0,1 );
	
	//color = vs_vertexColor.rgb;
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor * LightAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		MaterialDiffuseColor * LightDiffuseColor * LightColor2 * LightPower2 * cosTheta2 / (distance2*distance2) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance)+
		MaterialSpecularColor * LightSpecularColor * LightColor2 * LightPower2 * pow(cosAlpha2,5) / (distance2*distance2);
	
}